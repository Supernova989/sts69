name: Deploy App

on:
  push:
    branches:
      - deploy

jobs:
  auth:
    runs-on: ubuntu-latest
    outputs:
      authenticated: ${{ steps.authenticated.outcome }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Authenticate with GCP
        id: authenticated
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

  deploy-backend:
    needs: auth
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Authenticate with GCP
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Authenticate Docker with GCP
        run: gcloud auth configure-docker ${{ vars.GCP_REGION }}-docker.pkg.dev

      - name: Build and Push Docker image
        working-directory: backend
        run: |
          IMAGE=${{ vars.GCP_REGION }}-docker.pkg.dev/${{ vars.GCP_PROJECT_ID }}/backend/backend-service:latest
          docker build -t $IMAGE .
          docker push $IMAGE

      - name: Deploy to Cloud Run
        run: |
          gcloud run deploy backend-service \
            --image=${{ vars.GCP_REGION }}-docker.pkg.dev/${{ vars.GCP_PROJECT_ID }}/backend/backend-service:latest \
            --platform=managed \
            --region=${{ vars.GCP_REGION }} \
            --project=${{ vars.GCP_PROJECT_ID }} \
            --allow-unauthenticated \
            --service-account=cloud-run@${{ vars.GCP_PROJECT_ID }}.iam.gserviceaccount.com \
            --update-env-vars=GCP_REGION=${{ vars.GCP_REGION }} \
            --update-env-vars=GCP_PROJECT_ID=${{ vars.GCP_PROJECT_ID }} \
            --update-env-vars=STRIPE_PUBLIC_KEY=${{ vars.STRIPE_PUBLIC_KEY }} \
            --update-env-vars=STRIPE_CHECKOUT_SUCCESS_URL=${{ vars.STRIPE_CHECKOUT_SUCCESS_URL }} \
            --update-env-vars=EXPIRE_STRIPE_CHECKOUT_TASK_URL=${{ vars.EXPIRE_STRIPE_CHECKOUT_TASK_URL }} \
            --update-env-vars=SEND_EMAIL_TASK_URL=${{ vars.SEND_EMAIL_TASK_URL }} \
            --update-env-vars=CORS_DOMAINS=${{ vars.CORS_DOMAINS }} \
            --update-env-vars=LOGGER_GCP_FORMAT="true" \
            --update-env-vars=STAGE=dev \
            --update-secrets=JWT_SECRET=JWT_SECRET:latest \
            --update-secrets=JWT_ISSUER=JWT_ISSUER:latest \
            --update-secrets=STRIPE_PRIVATE_KEY=STRIPE_PRIVATE_KEY:latest \
            --update-secrets=DATABASE_URL=DATABASE_URL:latest 

  deploy-frontend:
    needs: auth
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Authenticate with GCP
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22

      - name: Install & build frontend
        working-directory: frontend
        env:
          VITE_BASE_URL: ${{ vars.FRONTEND_BASE_URL }}
        run: |
          yarn install
          yarn build

      - name: Upload to GCS
        uses: google-github-actions/upload-cloud-storage@v1
        with:
          path: frontend/dist
          destination: "${{ vars.GCP_PROJECT_ID }}-frontend"
          parent: false

  deploy-cloud-functions:
    needs: auth
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Authenticate with GCP
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22

      - name: Install dependencies
        working-directory: cloud-functions/cancel-stripe-session
        run: yarn install

      - name: Build function
        working-directory: cloud-functions/cancel-stripe-session
        run: yarn build

      - name: Copy package.json and yarn.lock
        working-directory: cloud-functions/cancel-stripe-session
        run: |
          cp package.json dist/
          cp yarn.lock dist/

      - name: Deploy cancel-stripe-session function
        run: |
          gcloud functions deploy cancel-stripe-session \
            --runtime=nodejs22 \
            --trigger-http \
            --region=${{ vars.GCP_REGION }} \
            --entry-point=handler \
            --project=${{ vars.GCP_PROJECT_ID }} \
            --source=cloud-functions/cancel-stripe-session/dist \
            --update-secrets=STRIPE_PRIVATE_KEY=STRIPE_PRIVATE_KEY:latest \
            --update-secrets=DATABASE_URL=DATABASE_URL:latest